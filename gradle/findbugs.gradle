/**
 * FindBugs task
 * Usage:
 * - place this file under root dir of your project at /gradle  directory
 * - apply script from your gradle file:
 * apply from : "{rootDir}/gradle/findbugs.gradle"
 *
 * To configure findbugs exclude filter use configs at:
 * "{rootDir}/config/findbugs/exclude.xml"
 *
 * Xml and HTML reports are stored:
 * "{project.buildDir}/reports/findbugs/"
 * HTML styling is done by XSLT stylesheet:
 * "{rootDir}/config/findbugs/findbugs-default.xsl"
 */

configurations {
    findbugs
    findbugsPlugins
}

repositories {
    mavenCentral()
}

dependencies {
    findbugs "com.google.code.findbugs:findbugs-ant:3.0.0"
}

task findbugs(type: AndroidFindBugsTask) {
}

///////////////////////////////////////////////
////////////// Groovy Task Class //////////////
///////////////////////////////////////////////
import org.gradle.api.internal.project.IsolatedAntBuilder

/**
 * See parameters at http://findbugs.sourceforge.net/manual/anttask.html
 */
class AndroidFindBugsTask extends DefaultTask {
    @InputFile
    @Optional
    File excludeFile = new File("$project.rootDir/config/findbugs/exclude.xml")
    @InputFile
    @Optional
    File xslFile = new File("$project.rootDir/config/findbugs/findbugs-default.xsl")
    @OutputFile
    File outputFile = new File("$project.buildDir/reports/findbugs/findbugs-${project.name}.xml")
    FileCollection findbugsClasspath = project.configurations.findbugs
    FileCollection pluginClasspath = project.configurations.findbugsPlugins
    Boolean ignoreFailures = false
    Project gradleProject = project
    String errorProp = 'findbugsError'
    String warningsProp = 'findbugsWarnings'

    def AndroidFindBugsTask() {
        description = 'Runs FindBugs against Android sourcesets.'
        group = 'Code Quality'
        dependsOn 'assemble'
    }

    @TaskAction
    def findBugs() {
        outputFile.parentFile.mkdirs()
        def antBuilder = services.get(IsolatedAntBuilder)
        antBuilder.withClasspath(findbugsClasspath).execute {
            ant.taskdef(name: 'findbugs', classname: 'edu.umd.cs.findbugs.anttask.FindBugsTask')
            ant.findbugs(debug: 'true',
                    errorProperty: errorProp,
                    warningsProperty: warningsProp,
                    output: 'xml:withMessages',
                    outputFile: outputFile,
                    excludeFilter: excludeFile,
                    jvmargs: '-Xmx768M') {
                findbugsClasspath.addToAntBuilder(ant, 'classpath')
                pluginClasspath.addToAntBuilder(ant, 'pluginList')
                auxclassPath(path: gradleProject.configurations.compile.asPath)
                gradleProject.android.sourceSets*.java.srcDirs.each { srcDir ->
                    sourcePath(path: srcDir)
                }
                "class"(location: "$gradleProject.buildDir/intermediates/classes/release")
            }

            if (ant.project.properties[errorProp]) {
                throw new GradleException("FindBugs encountered an error. Run with --debug to get more information.")
            }

            if (outputFile.exists()) {
                ant.xslt(in: outputFile,
                        style: xslFile,
                        out: outputFile.absolutePath.replaceFirst(~/\.[^\.]+$/, ".html")
                )
            }

            if (ant.project.properties[warningsProp] && !ignoreFailures) {
                if (outputFile) {
                    throw new GradleException("FindBugs rule violations were found. See the report at ${outputFile}.")
                } else {
                    throw new GradleException("FindBugs rule violations were found.")
                }
            }
        }
    }
}